import { useState } from "react";
import Image from "next/image";
import Head from "next/head";
import { ethers } from "ethers";
import { useAccount, useContract, useSigner, useSignMessage } from "wagmi";
import { Web3Button } from "@web3modal/react";
import s from "styles/home.module.scss";

import ReferralAccessModal from "components/Modal/ReferralAccessModal";

import salesAbi from "assets/sales-abi.json";
import nftAbi from "assets/nft-abi.json";
import {inspect} from "util";
import colors = module

const SALES_CONTRACT_ADDRESS = "0x7ba75866bF445b476b1004D0e41BD1749E0cb1CF";
const NFT_CONTRACT_ADDRESS = "0x25bf876880A40b77F51F878470C9Ca1c67F7fd4a";

const CONFIRMATIONS_COUNT = 10;

const IS_WHITELISTED = true;

export default function Home() {
  const [referralModalOpen, setReferralModalOpen] = useState<boolean>(false);
  const { data: signer } = useSigner();

  const { address } = useAccount();

  const { signMessageAsync } = useSignMessage();

  const salesContractInstance = useContract({
    address: SALES_CONTRACT_ADDRESS,
    abi: salesAbi,
    signerOrProvider: signer,
  });

  const nftContactInstance = useContract({
    address: NFT_CONTRACT_ADDRESS,
    abi: nftAbi,
    signerOrProvider: signer,
  });

  const getNFTCount = async () => {
    const response = await nftContactInstance?.balanceOf(address);
    return response?.toString();
  };

  const generateSignature = async () => {
    if (address === undefined) throw new Error("Address does not exist");
    const message = ethers.utils.keccak256(ethers.utils.arrayify(address));
    const signature = await signMessageAsync({
      message: ethers.utils.arrayify(message),
    });
    return ethers.utils.splitSignature(signature);
  };

  const purchaseToken = async () => {
    const { wait } = await salesContractInstance?.purchaseToken();
    await wait(CONFIRMATIONS_COUNT);
  };

  const purchaseTokenWhitelisted = async () => {
    const { r, s, v } = await generateSignature();
    const { wait } = await salesContractInstance?.purchaseTokenWhiteListed(
      r,
      s,
      v
    );
    await wait(CONFIRMATIONS_COUNT);
  };

  const handleMint = async () => {
    if (IS_WHITELISTED) purchaseTokenWhitelisted().then();
    else purchaseToken().then();
  };

  const closeReferralModal = () => {
    setReferralModalOpen(false);
  };

  return (
    <>
      <Head>
        <title>MetaTrace</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="" />
      </Head>
      <main className={s.main}>
        <div className={s.cubeWrapper}>
          <Image
            src="/images/cube.png"
            fill
            alt=""
            style={{ objectFit: "cover",  marginTop: "115px"}}
          />
          <div style={{height: '100vh',width: '290px',backgroundColor: 'var(--main-color)', marginLeft: '172px'}} />
        </div>
        <div className={s.timer}>
          <span className={s.time}>
            12d : 16h : 45m
          </span>
        </div>
        <button className={s.descriptionBtn} onClick={() => setReferralModalOpen(true)}>
          How it works?
        </button>
        <ReferralAccessModal
            open={referralModalOpen}
            close={closeReferralModal}
        />
        <div className={s.container}>
          <header className={s.header}>
            <div className={s.logoWrapper}>
              <Image
                  src="/images/logo.svg"
                  fill
                  alt=""
                  style={{ objectFit: "cover"}}
              />
            </div>
            <button className={s.languageBtn}>
              <span>
                en
              </span>
            </button>
          </header>
          <h1 className={s.tittle}>
            UPCOMING FREE MINT NFT pass
            <span style={{color: "rgba(255, 165, 59, 1)"}}> metatRACE</span>
          </h1>
          <div className={s.nftBlock}>
              <span>total: </span>
              <span className={s.nftAmount}>3000 NFT</span>
          </div>
          <button className={s.whitelist}>

          </button>
          <h2 className={s.heading}>
            Only for NFT Pass owners, the following events will open!
          </h2>
          <div className={s.textBlock}>
          <p>
            It is genesis access to all mechanics and closed events of the TRACE metaverse!
          </p>
          <p>
            By minting the NFT Pass, you will receive a unique QR code and many amazing perks,
            including bonus NFT airdrops and draws!
          </p>
          <p>
            Stay in the center of MetaTrace events
          </p>
          </div>
          <div className={s.footer}>
            <div className={s.logoWrapper}>
              <Image
                  src="/images/logo.svg"
                  fill
                  alt=""
                  style={{ objectFit: "cover"}}
              />
            </div>
            <div className={s.infoBlock}>
              <p>© 2022 - Copyright by MIXR Lab. All rights reserved.  </p>
              <div className={s.social}>
                <a href="#" className={s.link}>
                  Terms of use
                  <div className={s.underline}></div>
                </a>
                <a href="#" className={s.link}>
                  Сookie policy
                  <div className={s.underline}></div>
                </a>
                <a href="#" className={s.link}>
                  Privacy policy
                  <div className={s.underline}></div>
                </a>
              </div>
            </div>
          </div>
          {/*<Web3Button/>*/}
        </div>

        {/*<button onClick={handleMint}>SSSSSS</button>*/}

      </main>
    </>
  );
}
