import { useState } from "react";
import Image from "next/image";
import Head from "next/head";
import { ethers } from "ethers";
import { useAccount, useContract, useSigner, useSignMessage } from "wagmi";
import { Web3Button } from "@web3modal/react";
import s from "styles/home.module.scss";

import ReferralAccessModal from "components/Modal/ReferralAccessModal";

import salesAbi from "assets/sales-abi.json";
import nftAbi from "assets/nft-abi.json";

const SALES_CONTRACT_ADDRESS = "0x7ba75866bF445b476b1004D0e41BD1749E0cb1CF";
const NFT_CONTRACT_ADDRESS = "0x25bf876880A40b77F51F878470C9Ca1c67F7fd4a";

const REACT_APP_API_ENDPOINT = "https://trace-core.flamma.app";

const CONFIRMATIONS_COUNT = 10;

const IS_WHITELISTED = true;

export default function Home() {
  const [referralModalOpen, setReferralModalOpen] = useState<boolean>(false);
  const [isWhiteListed, setIsWhiteListed] = useState<boolean>(false);
  const { data: signer } = useSigner();

  const { address } = useAccount();

  const { signMessageAsync } = useSignMessage();

  const salesContractInstance = useContract({
    address: SALES_CONTRACT_ADDRESS,
    abi: salesAbi,
    signerOrProvider: signer,
  });

  const nftContactInstance = useContract({
    address: NFT_CONTRACT_ADDRESS,
    abi: nftAbi,
    signerOrProvider: signer,
  });

  const getNFTCount = async () => {
    const response = await nftContactInstance?.balanceOf(address);
    return response?.toString();
  };

  const generateSignature = async () => {
    if (address === undefined) throw new Error("Address does not exist");
    const message = ethers.utils.keccak256(ethers.utils.arrayify(address));
    const signature = await signMessageAsync({
      message: ethers.utils.arrayify(message),
    });
    return ethers.utils.splitSignature(signature);
  };

  const purchaseToken = async () => {
    const { wait } = await salesContractInstance?.purchaseToken();
    await wait(CONFIRMATIONS_COUNT);
  };

  const purchaseTokenWhitelisted = async () => {
    const { r, s, v } = await generateSignature();
    const { wait } = await salesContractInstance?.purchaseTokenWhiteListed(
      r,
      s,
      v
    );
    await wait(CONFIRMATIONS_COUNT);
  };

  const handleMint = async () => {
    if (IS_WHITELISTED) purchaseTokenWhitelisted().then();
    else purchaseToken().then();
  };

  const closeReferralModal = () => {
    setReferralModalOpen(false);
  };

  const checkWhiteList = async () => {
    try {
      const response = await fetch(`${REACT_APP_API_ENDPOINT}/white-list`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ wallet_address: await signer?.getAddress() }),
      });
      if (!response.ok) {
        throw new Error("Server error");
      }
      const data = await response.json();
      if (data.result) {
        setIsWhiteListed(true);
      }
      console.log(data);
    } catch (error) {
      console.log("error: ", error);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={s.main}>
        <div className={s.container}></div>
        <Web3Button />
        <div className={s.imageWrapper}>
          <Image
            src="/images/cube.png"
            fill
            alt=""
            style={{ objectFit: "cover" }}
          />
        </div>
        <button onClick={handleMint}>Mint NFT</button>
        <button onClick={() => setReferralModalOpen(true)}>Mint NFT</button>
        <ReferralAccessModal
          open={referralModalOpen}
          close={closeReferralModal}
        />
      </main>
    </>
  );
}
